"""
标题字幕处理器 - 基于原Coze工作流Node 1204256和1182713
专门处理开场2字标题字幕的显示
"""
import time
import logging
from typing import List, Optional
from dataclasses import dataclass
from pathlib import Path

from utils.file_manager import FileManager
from utils.subtitle_utils import SubtitleUtils
from video.subtitle_processor import SubtitleSegment

@dataclass
class TitleSubtitleRequest:
    """标题字幕请求"""
    title: str                    # 2字标题
    display_duration: float = 3.0  # 标题显示时长（秒）
    start_time: float = 0.0       # 开始时间
    language: str = "zh"          # 语言

@dataclass 
class TitleSubtitleResult:
    """标题字幕结果"""
    success: bool                 # 是否成功
    title_segments: List[SubtitleSegment]  # 标题字幕段落
    processing_time: float        # 处理时间
    error_message: str = ""       # 错误信息

class TitleSubtitleProcessor:
    """
    标题字幕处理器
    
    基于原Coze工作流的标题字幕系统：
    - Node 1204256: 标题字幕配置
    - Node 1182713: 标题字幕轨道添加
    - 40号大字体，白色文字，黑色边框
    - 居中显示，开场显示3秒
    """
    
    def __init__(self, file_manager: FileManager):
        self.file_manager = file_manager
        self.logger = logging.getLogger('story_generator.title_subtitle')
        
        self.logger.info("TitleSubtitleProcessor initialized")
    
    def process_title_subtitle(self, request: TitleSubtitleRequest) -> TitleSubtitleResult:
        """
        处理标题字幕
        
        Args:
            request: 标题字幕请求
        
        Returns:
            TitleSubtitleResult: 处理结果
        """
        start_time = time.time()
        
        try:
            # 验证标题
            if not self._validate_title(request.title):
                raise ValueError(f"Invalid title: '{request.title}' - must be 2 Chinese characters")
            
            # 创建标题字幕段落
            title_segment = SubtitleSegment(
                text=request.title,
                start_time=request.start_time,
                end_time=request.start_time + request.display_duration,
                duration=request.display_duration
            )
            
            # 创建结果
            result = TitleSubtitleResult(
                success=True,
                title_segments=[title_segment],
                processing_time=time.time() - start_time
            )
            
            self.logger.info(f"Title subtitle created: '{request.title}' ({request.display_duration}s)")
            return result
            
        except Exception as e:
            processing_time = time.time() - start_time
            error_msg = f"Title subtitle processing failed: {e}"
            self.logger.error(error_msg)
            
            return TitleSubtitleResult(
                success=False,
                title_segments=[],
                processing_time=processing_time,
                error_message=error_msg
            )
    
    def save_title_subtitle_file(self, 
                               title_segments: List[SubtitleSegment], 
                               output_path: str, 
                               format: str = "srt") -> str:
        """
        保存标题字幕文件
        
        Args:
            title_segments: 标题字幕段落列表
            output_path: 输出文件路径
            format: 字幕格式 (srt/ass)
        
        Returns:
            str: 保存的文件路径
        """
        try:
            # 确保输出目录存在
            output_path = Path(output_path)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            if format.lower() == "srt":
                return self._save_srt_format(title_segments, output_path)
            elif format.lower() == "ass":
                return self._save_ass_format(title_segments, output_path)
            else:
                raise ValueError(f"Unsupported subtitle format: {format}")
                
        except Exception as e:
            self.logger.error(f"Failed to save title subtitle file: {e}")
            raise
    
    def _save_srt_format(self, segments: List[SubtitleSegment], output_path: Path) -> str:
        """保存SRT格式标题字幕"""
        srt_content = []
        
        for i, segment in enumerate(segments, 1):
            start_time_str = self._format_srt_time(segment.start_time)
            end_time_str = self._format_srt_time(segment.end_time)
            
            srt_content.append(f"{i}")
            srt_content.append(f"{start_time_str} --> {end_time_str}")
            srt_content.append(segment.text)
            srt_content.append("")  # 空行分隔
        
        # 写入文件
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(srt_content))
        
        self.logger.info(f"Title subtitle SRT saved: {output_path}")
        return str(output_path)
    
    def _save_ass_format(self, segments: List[SubtitleSegment], output_path: Path) -> str:
        """保存ASS格式标题字幕（带样式）"""
        # ASS文件头
        ass_content = [
            "[Script Info]",
            "Title: Story Title Subtitle",
            "ScriptType: v4.00+",
            "",
            "[V4+ Styles]",
            "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding",
            # 基于原工作流40号大字体配置
            "Style: Title,Arial,40,&Hffffff,&Hffffff,&H000000,&H000000,1,0,0,0,100,100,0,0,1,2,0,2,10,10,10,1",
            "",
            "[Events]",
            "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text"
        ]
        
        # 添加字幕事件
        for segment in segments:
            start_time_str = self._format_ass_time(segment.start_time)
            end_time_str = self._format_ass_time(segment.end_time)
            
            ass_content.append(f"Dialogue: 0,{start_time_str},{end_time_str},Title,,0,0,0,,{segment.text}")
        
        # 写入文件
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(ass_content))
        
        self.logger.info(f"Title subtitle ASS saved: {output_path}")
        return str(output_path)
    
    def _format_srt_time(self, seconds: float) -> str:
        """格式化SRT时间戳 - 使用统一工具类"""
        return SubtitleUtils.format_srt_time(seconds)
    
    def _format_ass_time(self, seconds: float) -> str:
        """格式化ASS时间戳 - 使用统一工具类"""
        return SubtitleUtils.format_ass_time(seconds)
    
    def _validate_title(self, title: str) -> bool:
        """验证标题是否符合要求"""
        if not title:
            return False
        
        # 检查是否为2个中文字符
        import re
        chinese_chars = re.findall(r'[\u4e00-\u9fff]', title)
        
        return len(chinese_chars) == 2
    
    def get_processing_stats(self) -> dict:
        """获取处理统计信息"""
        return {
            'processor_type': 'title_subtitle',
            'supported_formats': ['srt', 'ass'],
            'font_size': 40,  # 基于原工作流配置
            'alignment': 'center'
        }
    
    def __str__(self) -> str:
        """字符串表示"""
        return "TitleSubtitleProcessor(font_size=40, alignment=center)"